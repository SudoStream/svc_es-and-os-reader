akka {
  stdout-loglevel = "OFF"
  loglevel = "OFF"
}

mongo-async-driver {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = INFO
  }
}

mongodb {
  connection_uri = ""
  connection_uri = ${?MONGODB_CONNECTION_URI}

  host = "localhost"
  host = ${?MONGODB_HOST}

  port = "27017"
  port = ${?MONGODB_PORT}
}

esandos {
  source_topic = "UI_REQUEST"
  source_topic = ${?UI_SOURCE_TOPIC}

  sink_topic = "EXPERIENCES_AND_OUTCOMES"
  sink_topic = ${?SINK_TOPIC}

  system_events_topic = "SYSTEM_ALL_EVENTS_LOG"
  system_events_topic = ${?SYSTEM_EVENTS_TOPIC}
}

http {
  interface = "127.0.0.1"
  interface = ${?BIND_IP}
  port = 9030
}

# Properties for akka.kafka.ProducerSettings can be
# defined in this section or a configuration section with
# the same layout.
akka.kafka.producer {
  bootstrapservers = "localhost:9092"
  bootstrapservers = ${?KAFKA_BOOTSTRAP_SERVERS}

  # Tuning parameter of how many sends that can run in parallel.
  parallelism = 100

  # How long to wait for `KafkaProducer.close`
  close-timeout = 60s

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the producer stages. Some blocking may occur.
  # When this value is empty, the dispatcher configured for the stream
  # will be used.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
  # can be defined in this configuration section.
  kafka-clients {
  }
}

# Properties for akka.kafka.ConsumerSettings can be
# defined in this section or a configuration section with
# the same layout.
akka.kafka.consumer {
  bootstrapservers = "localhost:9092"
  bootstrapservers = ${?KAFKA_BOOTSTRAP_SERVERS}
  groupid = "es-and-os-reader"

  # Tuning property of scheduled polls.
  poll-interval = 50ms

  # Tuning property of the `KafkaConsumer.poll` parameter.
  # Note that non-zero value means that blocking of the thread that
  # is executing the stage will be blocked.
  poll-timeout = 50ms

  # The stage will be await outstanding offset commit requests before
  # shutting down, but if that takes longer than this timeout it will
  # stop forcefully.
  stop-timeout = 30s

  # How long to wait for `KafkaConsumer.close`
  close-timeout = 20s

  # If offset commit requests are not completed within this timeout
  # the returned Future is completed `TimeoutException`.
  commit-timeout = 15s

  # If the KafkaConsumer can't connect to the broker the poll will be
  # aborted after this timeout. The KafkaConsumerActor will throw
  # org.apache.kafka.common.errors.WakeupException which will be ignored
  # until max-wakeups limit gets exceeded.
  wakeup-timeout = 60s

  # After exceeding maxinum wakeups the consumer will stop and the stage will fail.
  max-wakeups = 10

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the KafkaConsumerActor. Some blocking may occur.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients {

    enable.auto.commit = true
  }
}



